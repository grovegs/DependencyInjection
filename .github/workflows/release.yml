name: üöÄ Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Select the version to increment (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
      publish:
        description: "Publish the NuGet package?"
        required: true
        default: true
        type: boolean

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      PROJECT_ID: DependencyInjection
      PACKAGE_NAME: dependency-injection
      NUGET_PROJECT: src/DependencyInjection/DependencyInjection.csproj
      GODOT_ADDONS: src/DependencyInjection.Godot/addons

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: üì¶ Restore Dependencies
        run: dotnet restore $NUGET_PROJECT

      - name: üèóÔ∏è Build Project
        run: dotnet build --no-restore --configuration Release $NUGET_PROJECT

      - name: üîñ Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "0.0.0")
          echo "latest_tag=${latest_tag:-0.0.0}" >> $GITHUB_OUTPUT

      - name: üßÆ Calculate Version
        id: calculate_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.get_tag.outputs.latest_tag }}"
          case "${{ github.event.inputs.version_bump }}" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac
          echo "PROJECT_VERSION=$major.$minor.$patch" >> $GITHUB_ENV

      - name: üì¶ Pack NuGet Package
        run: |
          dotnet pack --no-build --configuration Release /p:PackageId=$PROJECT_ID /p:PackageVersion=$PROJECT_VERSION --output $RUNNER_TEMP $NUGET_PROJECT
          mv $RUNNER_TEMP/$PROJECT_ID.$PROJECT_VERSION.nupkg $RUNNER_TEMP/$PACKAGE_NAME-$PROJECT_VERSION.nupkg

      - name: üì¶ Pack Godot Addon
        run: |
          INPUT_DIR=$GODOT_ADDONS/$PROJECT_ID
          OUTPUT_DIR=$RUNNER_TEMP/$PACKAGE_NAME-$PROJECT_VERSION-godot
          mkdir -p $OUTPUT_DIR
          cp -r $INPUT_DIR $OUTPUT_DIR
          cp README.md $OUTPUT_DIR/$PROJECT_ID/README.md
          cp LICENSE $OUTPUT_DIR/$PROJECT_ID/LICENSE
          sed -i 's/version="[^"]*"/version="'$PROJECT_VERSION'"/' $OUTPUT_DIR/$PROJECT_ID/plugin.cfg
          cd $RUNNER_TEMP && zip -r $PACKAGE_NAME-$PROJECT_VERSION-godot.zip $PACKAGE_NAME-$PROJECT_VERSION-godot

      - name: üöÄ Publish NuGet Package
        if: ${{ github.event.inputs.publish == 'true' }}
        run: dotnet nuget push $RUNNER_TEMP/$PACKAGE_NAME-$PROJECT_VERSION.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json

      - name: üîñ Create Tag and Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "$PROJECT_VERSION"
          git push origin "$PROJECT_VERSION"

      - name: üìù Create GitHub Release
        run: |
          gh release create $PROJECT_VERSION $RUNNER_TEMP/$PACKAGE_NAME-$PROJECT_VERSION.nupkg $RUNNER_TEMP/$PACKAGE_NAME-$PROJECT_VERSION-godot.zip \
          --title "$PROJECT_ID $PROJECT_VERSION" --generate-notes --notes-start-tag ${{ steps.get_tag.outputs.latest_tag }}
