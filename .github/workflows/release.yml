name: üöÄ Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Select the version to increment (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT_PATH: src/DependencyInjection/DependencyInjection.csproj
      GODOT_ADDON_PATH: src/DependencyInjection.Godot/addons/DependencyInjection
      GODOT_ADDON_NAME: dependency-injection
      NUGET_PACKAGE_OUTPUT: ./nupkg
      TEMP_FOLDER: ./temp

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üõ†Ô∏è Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: üì¶ Restore Dependencies
        run: dotnet restore $PROJECT_PATH

      - name: üèóÔ∏è Build Project
        run: dotnet build --no-restore --configuration Release $PROJECT_PATH

      - name: üîñ Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="0.0.0"
            echo "No tags found. Using default version: $latest_tag"
          else
            echo "Latest Tag: $latest_tag"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: üßÆ Calculate New Version
        id: calculate_version
        run: |
          current_version="${{ steps.get_tag.outputs.latest_tag }}"
          IFS='.' read -r major minor patch <<< "$current_version"
          case "${{ github.event.inputs.version_bump }}" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: üì¶ Pack NuGet Package
        run: dotnet pack --no-build --configuration Release /p:PackageVersion=${{ steps.calculate_version.outputs.new_version }} -o $NUGET_PACKAGE_OUTPUT $PROJECT_PATH

      - name: üöÄ Publish NuGet Package
        run: dotnet nuget push $NUGET_PACKAGE_OUTPUT/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: üîñ Create Tag and Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ steps.calculate_version.outputs.new_version }}"
          git push origin "${{ steps.calculate_version.outputs.new_version }}"

      - name: üì¶ Pack Godot Addon
        run: |
          mkdir -p $TEMP_FOLDER/${{ env.GODOT_ADDON_NAME }}-godot-${{ steps.calculate_version.outputs.new_version }}/DependencyInjection
          cp -r $GODOT_ADDON_PATH/* $TEMP_FOLDER/${{ env.GODOT_ADDON_NAME }}-godot-${{ steps.calculate_version.outputs.new_version }}/DependencyInjection/
          sed -i 's/version="[^"]*"/version="'${{ steps.calculate_version.outputs.new_version }}'"/' $TEMP_FOLDER/${{ env.GODOT_ADDON_NAME }}-godot-${{ steps.calculate_version.outputs.new_version }}/DependencyInjection/plugin.cfg
          zip -r ${{ env.GODOT_ADDON_NAME }}-${{ steps.calculate_version.outputs.new_version }}-godot-addon.zip -j $TEMP_FOLDER/${{ env.GODOT_ADDON_NAME }}-godot-${{ steps.calculate_version.outputs.new_version }} -x '*.zip'
        shell: bash

      - name: üìù Create GitHub Release with Auto-Generated Notes
        run: |
          gh release create ${{ steps.calculate_version.outputs.new_version }} $NUGET_PACKAGE_OUTPUT/dependency-injection-${{ steps.calculate_version.outputs.new_version }}.nupkg ${{ env.GODOT_ADDON_NAME }}-${{ steps.calculate_version.outputs.new_version }}-godot-addon.zip \
          --title "dependency-injection-${{ steps.calculate_version.outputs.new_version }}" \
          --generate-notes