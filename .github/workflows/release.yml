name: 🚀 Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Select the version to increment (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PROJECT_PATH: src/DependencyInjection/DependencyInjection.csproj
      GODOT_ADDON_PATH: src/DependencyInjection.Godot/addons/DependencyInjection
      GODOT_ADDON_NAME: dependency-injection
      NUGET_PACKAGE_OUTPUT: ./nupkg

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🛠️ Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: 📦 Restore Dependencies
        run: dotnet restore $PROJECT_PATH

      - name: 🏗️ Build Project
        run: dotnet build --no-restore --configuration Release $PROJECT_PATH

      - name: 🔖 Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="0.0.0"
            echo "No tags found. Using default version: $latest_tag"
          else
            echo "Latest Tag: $latest_tag"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: 🧮 Calculate New Version
        id: calculate_version
        run: |
          current_version="${{ steps.get_tag.outputs.latest_tag }}"
          IFS='.' read -r major minor patch <<< "$current_version"
          case "${{ github.event.inputs.version_bump }}" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: 📦 Pack NuGet Package
        run: dotnet pack --no-build --configuration Release /p:PackageVersion=${{ steps.calculate_version.outputs.new_version }} -o $NUGET_PACKAGE_OUTPUT $PROJECT_PATH

      - name: 🚀 Publish NuGet Package
        run: dotnet nuget push $NUGET_PACKAGE_OUTPUT/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: 🔖 Create Tag and Push
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ steps.calculate_version.outputs.new_version }}"
          git push origin "${{ steps.calculate_version.outputs.new_version }}"

      - name: 📦 Install Conventional Changelog CLI
        run: npm install -g conventional-changelog-cli

      - name: 📝 Generate Changelog
        run: conventional-changelog -p conventionalcommits -i CHANGELOG.md -s -r 0

      - name: 📤 Commit and Push Changelog
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for version ${{ steps.calculate_version.outputs.new_version }}"
          git push origin

      - name: 📝 Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "${{ steps.calculate_version.outputs.new_version }}"
          release_name: "Release ${{ steps.calculate_version.outputs.new_version }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: 🔄 Update Godot Addon Version
        run: sed -i 's/version="[^"]*"/version="'${{ steps.calculate_version.outputs.new_version }}'"/' $GODOT_ADDON_PATH/plugin.cfg

      - name: 📦 Compress Godot Addon
        run: |
          zip -r ${{ env.GODOT_ADDON_NAME }}-godot-v${{ steps.calculate_version.outputs.new_version }}.zip $GODOT_ADDON_PATH
        shell: bash

      - name: 📤 Upload Godot Addon to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.GODOT_ADDON_NAME }}-godot-v${{ steps.calculate_version.outputs.new_version }}.zip
          asset_name: ${{ env.GODOT_ADDON_NAME }}-godot-v${{ steps.calculate_version.outputs.new_version }}.zip
          asset_content_type: application/zip
